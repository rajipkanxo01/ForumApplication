@page "/{forumId:int}/CreatePost"
@using HTTPClients.ClientInterfaces
@using global::Shared.Models
@using Microsoft.IdentityModel.Tokens
@using global::Shared.DTOs
@inject AuthenticationStateProvider Context;
@inject IForumService ForumService;
@inject IPostService PostService;
@inject NavigationManager Manager;


<div class="post-form">
    <div class="header">
        <h1>Create a Post</h1>
    </div>
    <form>
        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" @bind="postTitle" placeholder="Enter your post title" required>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <textarea id="description" @bind="postDescription" placeholder="Enter your post description" required></textarea>
        </div>
        <div class="form-group">
            <label for="community">Community</label>
            <input type="text" placeholder="Forum Name" value="@forumName" disabled>
        </div>
        <button type="submit" @onclick="@(() => CreateAsync(ForumId))">Post</button>
    </form>
</div>


@code {
    private string? postTitle;
    private string? postDescription;
    private string? postCreatedBy;
    private string? forumName;
    private string? errorLabel;

    [Parameter]
    public int ForumId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await Context.GetAuthenticationStateAsync();
        postCreatedBy = state.User.Identity!.Name;

        Forum forumById = await ForumService.GetForumById(ForumId);
        forumName = forumById.ForumName;
    }

    public async Task CreateAsync(int forumId)
    {
        errorLabel = "";

        try
        {
            if (postTitle.IsNullOrEmpty() || postDescription.IsNullOrEmpty() || forumName.IsNullOrEmpty() || postCreatedBy.IsNullOrEmpty())
            {
                throw new Exception("Fields are empty!!!");
            }

            PostDto postDto = new PostDto(postTitle, postDescription, postCreatedBy);
    // {
    //     Title = PostTitle,
    //     CreatedBy = PostCreatedBy,
    //     Body = PostDescription
    // };

            CreatePostDto dto = new CreatePostDto(postDto, ForumId);
    // {
    //     ForumId = ForumId,
    //     PostDto = postDto
    // };

            await PostService.CreateAsync(dto);
            Manager.NavigateTo($"/NavigateToForum/{forumId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }


}